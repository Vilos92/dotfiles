#!/bin/sh

# ==============================================================================
#
#                            !!! IMPORTANT !!!
#
# This script performs a ONE-WAY MIRROR backup.
#
# The Samsung T7 drive is the DESTINATION. It is intended to be an exact copy
# of the source files.
#
# Data flows FROM:
#   - /Volumes/Elements/Local Vault/
#   - /Volumes/Elements/Cloud Vault/
#   - /Volumes/Elements/Cold Local Vault/
#   - /Volumes/Elements/Public Vault/
#   - /Volumes/Elements/Upload Vault/
#
# Data flows TO:
#   - /Volumes/T7/Backups/
#
# Because this script uses the --delete flag, any file that exists on the
# Samsung T7 drive but NOT on the source Elements drive will be PERMANENTLY
# DELETED from the Samsung T7 drive during the sync.
#
# DO NOT STORE UNIQUE FILES IN THE SAMSUNG T7 DRIVE.
#
# ==============================================================================

# --- üõ°Ô∏è Safety Check & Global Options ---
# This script is in DRY-RUN mode by default.
# Pass the --execute flag as the first argument to make real changes.
RSYNC_OPTS="-av --progress --delete --stats" # Base options
if [ "$1" == "--execute" ]; then
    echo "‚úÖ --execute flag detected. Live backup mode engaged."
else
    echo "üõ°Ô∏è SAFE MODE: Running in simulation (dry-run) mode."
    RSYNC_OPTS="$RSYNC_OPTS --dry-run"
fi
echo "===================================================="


# --- Safety Checks ---
if [ ! -d "/Volumes/Elements" ]; then
    echo "‚ùå ERROR: Elements drive not found at /Volumes/Elements"
    echo "   Please ensure your Elements drive is connected and mounted"
    exit 1
fi

if [ ! -d "/Volumes/T7" ]; then
    echo "‚ùå ERROR: Samsung T7 drive not found at /Volumes/T7"
    echo "   Please ensure your Samsung T7 drive is connected and mounted"
    exit 1
fi

echo "‚úÖ Source Elements drive found: /Volumes/Elements"
echo "‚úÖ Target Samsung T7 drive found: /Volumes/T7"
echo "===================================================="


# --- Stage 1: Local Vault Backup ---
echo "‚ñ∂Ô∏è  Starting Stage 1: Local Vault Backup"
# --- Configuration for Stage 1 ---
LV_SOURCE_DRIVE="/Volumes/Elements/Local Vault"
LV_DEST_DRIVE="/Volumes/T7/Backups/Local Vault"
LV_DIRS_TO_SYNC=( "ableton packs" "media" )

# --- Logic for Stage 1 ---
for dir in "${LV_DIRS_TO_SYNC[@]}"; do
    SOURCE_PATH="$LV_SOURCE_DRIVE/$dir/"
    DEST_PATH="$LV_DEST_DRIVE/$dir/"
    if [ -d "$SOURCE_PATH" ]; then
        echo "üîÑ Syncing: $dir"
        rsync $RSYNC_OPTS "$SOURCE_PATH" "$DEST_PATH"
    else
        echo "‚ö†Ô∏è  Skipping, not found: $SOURCE_PATH"
    fi
done
echo "----------------------------------------------------"


# --- Stage 2: Cloud Vault Backup ---
echo "‚ñ∂Ô∏è  Starting Stage 2: Cloud Vault Backup"
# --- Configuration for Stage 2 ---
CV_SOURCE_DRIVE="/Volumes/Elements/Cloud Vault"
CV_DEST_DRIVE="/Volumes/T7/Backups/Cloud Vault"
CV_DIRS_TO_SYNC=( "GoPro" "media" "video renders" )

# --- Logic for Stage 2 ---
for dir in "${CV_DIRS_TO_SYNC[@]}"; do
    SOURCE_PATH="$CV_SOURCE_DRIVE/$dir/"
    DEST_PATH="$CV_DEST_DRIVE/$dir/"
    if [ -d "$SOURCE_PATH" ]; then
        echo "üîÑ Syncing: $dir"
        rsync $RSYNC_OPTS "$SOURCE_PATH" "$DEST_PATH"
    else
        echo "‚ö†Ô∏è  Skipping, not found: $SOURCE_PATH"
    fi
done
echo "----------------------------------------------------"


# --- Stage 3: Cold Local Vault Backup ---
echo "‚ñ∂Ô∏è  Starting Stage 3: Cold Local Vault Backup"
# --- Configuration for Stage 3 ---
CLV_SOURCE_DRIVE="/Volumes/Elements/Cold Local Vault"
CLV_DEST_DRIVE="/Volumes/T7/Backups/Cold Local Vault"

# --- Logic for Stage 3 ---
if [ -d "$CLV_SOURCE_DRIVE" ]; then
    echo "üîÑ Syncing: Cold Local Vault"
    rsync $RSYNC_OPTS "$CLV_SOURCE_DRIVE/" "$CLV_DEST_DRIVE/"
else
    echo "‚ö†Ô∏è  Skipping, not found: $CLV_SOURCE_DRIVE"
fi
echo "----------------------------------------------------"


# --- Stage 4: Public Vault Backup ---
echo "‚ñ∂Ô∏è  Starting Stage 4: Public Vault Backup"
# --- Configuration for Stage 4 ---
PV_SOURCE_DRIVE="/Volumes/Elements/Public Vault"
PV_DEST_DRIVE="/Volumes/T7/Backups/Public Vault"

# --- Logic for Stage 4 ---
if [ -d "$PV_SOURCE_DRIVE" ]; then
    echo "üîÑ Syncing: Public Vault"
    rsync $RSYNC_OPTS "$PV_SOURCE_DRIVE/" "$PV_DEST_DRIVE/"
else
    echo "‚ö†Ô∏è  Skipping, not found: $PV_SOURCE_DRIVE"
fi
echo "----------------------------------------------------"


# --- Stage 5: Upload Vault Backup ---
echo "‚ñ∂Ô∏è  Starting Stage 5: Upload Vault Backup"
# --- Configuration for Stage 5 ---
UV_SOURCE_DRIVE="/Volumes/Elements/Upload Vault"
UV_DEST_DRIVE="/Volumes/T7/Backups/Upload Vault"

# --- Logic for Stage 5 ---
if [ -d "$UV_SOURCE_DRIVE" ]; then
    echo "üîÑ Syncing: Upload Vault"
    rsync $RSYNC_OPTS "$UV_SOURCE_DRIVE/" "$UV_DEST_DRIVE/"
else
    echo "‚ö†Ô∏è  Skipping, not found: $UV_SOURCE_DRIVE"
fi
echo "----------------------------------------------------"


# --- Stage 6: Mac Vault Backup (Desktop -> T7) ---
echo "‚ñ∂Ô∏è  Starting Stage 6: Mac Vault Backup"
# --- Configuration for Stage 6 ---
MV_SOURCE_BASE="$HOME/Desktop/Mac Vault"
MV_DEST_BASE="/Volumes/T7/Backups/Mac Vault"
MV_DIRS_TO_SYNC=( "Music Production" "llm_models" "Greg News" )

# --- Logic for Stage 6 ---
for dir in "${MV_DIRS_TO_SYNC[@]}"; do
    SOURCE_PATH="$MV_SOURCE_BASE/$dir/"
    DEST_PATH="$MV_DEST_BASE/$dir/"
    if [ -d "$SOURCE_PATH" ]; then
        echo "üîÑ Syncing: $dir"
        rsync $RSYNC_OPTS "$SOURCE_PATH" "$DEST_PATH"
    else
        echo "‚ö†Ô∏è  Skipping, not found: $SOURCE_PATH"
    fi
done
echo "----------------------------------------------------"

echo "‚úÖ All backup stages finished."